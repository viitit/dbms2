 Database Schema for a Employee-pay scenario
employee(emp_id : integer, emp_name: string)
department(dept_id: integer, dept_name:string,dept_location:string)
paydetails(emp_id : integer, dept_id: integer, basic: integer, deductions: integer, additions: integer, DOJ: date)
payroll(emp_id : integer, pay_date: date) 
For the above schema, perform the followingâ€”
1.	Create the tables with the appropriate integrity constraints
2.	Insert around 10 records in each of the tables
3.	List  the employee details department wise
4.	List all the employee names who joined after particular date     
5.	List  the details of employees whose basic salary is between 10,000 and 20,000
6.	Give a count of how many employees are working in each department
7.	Give a names of the employees whose netsalary>10,000  
8.	List the  details for an employee_id=5
9.	Create a view which lists the emp_name and his netsalary


create table employee (emp_id integer primary key , emp_name varchar(50));
create table department (dept_id integer primary key, dept_name varchar(50), dept_location varchar(50));


create table paydetails ( emp_id integer, dept_id integer, basic integer,  deductions integer,
additions integer,  DOJ date, foreign key (emp_id) references employee(emp_id), foreign key (dept_id) references department(dept_id));

create table payroll ( emp_id integer, pay_date date, foreign key (emp_id) references employee(emp_id));


1.	insert into employee values (1, 'John'), (2, 'Ron'), (3, 'Weasly'), (4, 'Dominic'), (5, 'Pickle'), (6, 'Don'), (7, 'Alice'), (8, 'Rooney'), (9, 'Parth'), (10, 'Kartik');

2.	insert into department values      (1, 'dept1', 'loc1'),     (2, 'dept2', 'loc1'),     (3, 'dept3', 'loc3'),     (4, 'dept4', 'loc2'),     (5, 'dept5', 'loc3'), (6, 'dept6', 'loc2'),     (7, 'dept7', 'loc3'),     (8, 'dept8', 'loc1'),     (9, 'dept9', 'loc4'),     (10, 'dept10', 'loc4');

3.	INSERT INTO paydetails VALUES (1, 3, 10000, 3000, 2000, '2022-10-10'), (2, 2, 11000, 4000, 100,'2022-11-3'), (3, 7, 15000, 4000, 3000, '2022-05-05'),   (4, 2, 5000, 4000, 1000, '2022-03-02'), (5, 3, 10000, 3000, 1000, '2022-03-01'), (6, 2, 12000, 1000, 500, '2022-02-02'), (7, 4, 15000, 2000, 300, '2022-03-10'), (8, 1, 11000, 5000, 1000, '2022-05-06'), (9, 1, 40000, 100, 20000, '2022-02-07'), (10, 9, 14000, 2000, 1000, '2022-09-02');


4.	select e.emp_name, pd.DOJ from employee e, paydetails pd where e.emp_id = pd.emp_id and pd.DOJ > '2022-5-6';


5.	select distinct e.emp_name, pd.basic as base_salary from employee e, paydetails pd where e.emp_id = pd.emp_id and pd.basic between 10000 and 20000;


6.	select distinct d.dept_name, count(pd.emp_id)  from department d, paydetails pd  where
d.dept_id = pd.dept_id  group by (d.dept_name);


7.	select e.emp_name, (pd.basic - pd.deductions + pd.additions) as new_salary  from employee e, paydetails pd where e.emp_id = pd.emp_id and (pd.basic - pd.deductions + pd.additions) > 10000;

8.	select * from  employee e, paydetails pd, department d where e.emp_id = pd.emp_id and d.dept_id = pd.dept_id;


9.	create view show_data as select e.emp_name, (pd.basic + pd.additions - pd.deductions) as net_salary from employee e, paydetails pd;

select * from show_data;
